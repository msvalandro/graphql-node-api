{"version":3,"file":"/home/msvalandro/Documents/repo/graphql-node-api/src/middlewares/extract-jwt.middleware.ts","sources":["/home/msvalandro/Documents/repo/graphql-node-api/src/middlewares/extract-jwt.middleware.ts"],"names":[],"mappings":";;AACA,oCAAoC;AACpC,0CAA4C;AAC5C,wCAA6B;AAGhB,QAAA,oBAAoB,GAAG,GAAmB,EAAE;IAExD,OAAO,CAAC,GAAY,EAAE,GAAa,EAAE,IAAkB,EAAQ,EAAE;QAEhE,IAAI,aAAa,GAAW,GAAG,CAAC,GAAG,CAAC,eAAe,CAAC,CAAC,CAAC,iBAAiB;QACvE,IAAI,KAAK,GAAW,aAAa,CAAC,CAAC,CAAC,aAAa,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC;QAE5E,GAAG,CAAC,SAAS,CAAC,GAAG,EAAE,CAAC;QACpB,GAAG,CAAC,SAAS,CAAC,CAAC,eAAe,CAAC,GAAG,aAAa,CAAC;QAEhD,IAAI,CAAC,KAAK;YAAE,OAAO,IAAI,EAAE,CAAC;QAE1B,GAAG,CAAC,MAAM,CAAC,KAAK,EAAE,kBAAU,EAAE,CAAC,GAAG,EAAE,OAAY,EAAE,EAAE;YAEnD,IAAI,GAAG;gBAAE,OAAO,IAAI,EAAE,CAAC;YAEvB,gBAAE,CAAC,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,GAAG,EAAE;gBAC7B,UAAU,EAAE,CAAC,IAAI,EAAE,OAAO,CAAC;aAC3B,CAAC,CAAC,IAAI,CAAC,CAAC,IAAkB,EAAE,EAAE;gBAC9B,IAAI,IAAI,EAAE;oBACT,GAAG,CAAC,SAAS,CAAC,CAAC,UAAU,CAAC,GAAG;wBAC5B,EAAE,EAAE,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC;wBAClB,KAAK,EAAE,IAAI,CAAC,GAAG,CAAC,OAAO,CAAC;qBACxB,CAAC;iBACF;gBAED,OAAO,IAAI,EAAE,CAAC;YACf,CAAC,CAAC,CAAC;QACJ,CAAC,CAAC,CAAC;IACJ,CAAC,CAAC;AACH,CAAC,CAAC","sourcesContent":["import { RequestHandler, Request, Response, NextFunction } from 'express';\nimport * as jwt from 'jsonwebtoken';\nimport { JWT_SECRET } from '../utils/utils';\nimport db from './../models';\nimport { UserInstance } from '../models/UserModel';\n\nexport const extractJwtMiddleware = (): RequestHandler => {\n\n\treturn (req: Request, res: Response, next: NextFunction): void => {\n\n\t\tlet authorization: string = req.get('authorization'); //Bearer asdfasdf\n\t\tlet token: string = authorization ? authorization.split(' ')[1] : undefined;\n\n\t\treq['context'] = {};\n\t\treq['context']['authorization'] = authorization;\n\n\t\tif (!token) return next();\n\n\t\tjwt.verify(token, JWT_SECRET, (err, decoded: any) => {\n\n\t\t\tif (err) return next();\n\n\t\t\tdb.User.findById(decoded.sub, {\n\t\t\t\tattributes: ['id', 'email']\n\t\t\t}).then((user: UserInstance) => {\n\t\t\t\tif (user) {\n\t\t\t\t\treq['context']['authUser'] = {\n\t\t\t\t\t\tid: user.get('id'),\n\t\t\t\t\t\temail: user.get('email')\n\t\t\t\t\t};\n\t\t\t\t}\n\n\t\t\t\treturn next();\n\t\t\t});\n\t\t});\n\t};\n};"]}