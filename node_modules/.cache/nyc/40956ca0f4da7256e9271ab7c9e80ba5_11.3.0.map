{"version":3,"file":"/home/msvalandro/Documents/repo/graphql-node-api/src/models/index.ts","sources":["/home/msvalandro/Documents/repo/graphql-node-api/src/models/index.ts"],"names":[],"mappings":";;AAAA,yBAAyB;AACzB,6BAA6B;AAC7B,uCAAuC;AAIvC,MAAM,QAAQ,GAAW,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC;AACxD,MAAM,GAAG,GAAW,OAAO,CAAC,GAAG,CAAC,QAAQ,IAAI,aAAa,CAAC;AAC1D,IAAI,MAAM,GAAG,OAAO,CAAC,IAAI,CAAC,OAAO,CAAC,GAAG,SAAS,yBAAyB,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;AAC/E,IAAI,EAAE,GAAG,IAAI,CAAC;AAEd,IAAI,CAAC,EAAE,EAAE;IACR,EAAE,GAAG,EAAE,CAAC;IAER,MAAM,gBAAgB,GAAG;QACxB,GAAG,EAAE,SAAS,CAAC,EAAE,CAAC,EAAE;KACpB,CAAC;IAEF,MAAM,GAAG,MAAM,CAAC,MAAM,CAAC,EAAC,gBAAgB,EAAC,EAAE,MAAM,CAAC,CAAC;IAEnD,MAAM,SAAS,GAAwB,IAAI,SAAS,CACnD,MAAM,CAAC,QAAQ,EACf,MAAM,CAAC,QAAQ,EACf,MAAM,CAAC,QAAQ,EACf,MAAM,CACN,CAAC;IAEF,EAAE;SACA,WAAW,CAAC,SAAS,CAAC;SACtB,MAAM,CAAC,CAAC,IAAY,EAAE,EAAE;QACxB,MAAM,SAAS,GAAW,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;QACzC,OAAO,CAAC,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,IAAI,CAAC,IAAI,KAAK,QAAQ,CAAC,IAAI,CAAC,CAAC,SAAS,KAAK,KAAK,CAAC,IAAI,CAAC,SAAS,KAAK,KAAK,CAAC,CAAC,CAAC;IAC7G,CAAC,CAAC;SACD,OAAO,CAAC,CAAC,IAAY,EAAE,EAAE;QACzB,MAAM,KAAK,GAAG,SAAS,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE,IAAI,CAAC,CAAC,CAAC;QAC3D,EAAE,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,GAAG,KAAK,CAAC;IAC3B,CAAC,CAAC,CAAC;IAEJ,MAAM,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC,OAAO,CAAC,CAAC,SAAiB,EAAE,EAAE;QAC7C,IAAI,EAAE,CAAC,SAAS,CAAC,CAAC,SAAS,EAAE;YAC5B,EAAE,CAAC,SAAS,CAAC,CAAC,SAAS,CAAC,EAAE,CAAC,CAAC;SAC5B;IACF,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,WAAW,CAAC,GAAG,SAAS,CAAC;CAC5B;AAED,kBAA6B,EAAE,CAAC","sourcesContent":["import * as fs from 'fs';\nimport * as path from 'path';\nimport * as Sequelize from 'sequelize';\n\nimport { DbConnection } from '../interfaces/DbConnectionInterface';\n\nconst basename: string = path.basename(module.filename);\nconst env: string = process.env.NODE_ENV || 'development';\nlet config = require(path.resolve(`${__dirname}./../config/config.json`))[env];\nlet db = null;\n\nif (!db) {\n\tdb = {};\n\n\tconst operatorsAliases = {\n\t\t$in: Sequelize.Op.in\n\t};\n\n\tconfig = Object.assign({operatorsAliases}, config);\n\n\tconst sequelize: Sequelize.Sequelize = new Sequelize(\n\t\tconfig.database,\n\t\tconfig.username,\n\t\tconfig.password,\n\t\tconfig\n\t);\n\n\tfs\n\t\t.readdirSync(__dirname)\n\t\t.filter((file: string) => {\n\t\t\tconst fileSlice: string = file.slice(-3);\n\t\t\treturn (file.indexOf('.') !== 0) && (file !== basename) && ((fileSlice === '.js') || (fileSlice === '.ts'));\n\t\t})\n\t\t.forEach((file: string) => {\n\t\t\tconst model = sequelize.import(path.join(__dirname, file));\n\t\t\tdb[model['name']] = model;\n\t\t});\n\n\tObject.keys(db).forEach((modelName: string) => {\n\t\tif (db[modelName].associate) {\n\t\t\tdb[modelName].associate(db);\n\t\t}\n\t});\n\n\tdb['sequelize'] = sequelize;\n}\n\nexport default <DbConnection>db;"]}