{"version":3,"file":"/home/msvalandro/Documents/repo/graphql-node-api/src/graphql/dataloaders/UserLoader.ts","sources":["/home/msvalandro/Documents/repo/graphql-node-api/src/graphql/dataloaders/UserLoader.ts"],"names":[],"mappings":";;AAIA;IAEC,MAAM,CAAC,UAAU,CAAC,IAAe,EAAE,MAAiC,EAAE,eAAgC;QAErG,IAAI,GAAG,GAAa,MAAM,CAAC,GAAG,CAAC,KAAK,CAAC,EAAE,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;QAEnD,OAAO,OAAO,CAAC,OAAO,CACrB,IAAI;aACF,OAAO,CAAC;YACR,KAAK,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE;YAC3B,UAAU,EAAE,eAAe,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,IAAI,EAAE,EAAC,IAAI,EAAE,CAAC,IAAI,CAAC,EAAE,OAAO,EAAE,CAAC,OAAO,CAAC,EAAC,CAAC;SACzF,CAAC,CACH,CAAC;IACH,CAAC;CACD;AAdD,gCAcC","sourcesContent":["import { UserModel, UserInstance } from '../../models/UserModel';\nimport { DataLoaderParam } from '../../interfaces/DataLoaderParamInterface';\nimport { RequestedFields } from '../ast/RequestedFields';\n\nexport class UserLoader {\n\n\tstatic batchUsers(User: UserModel, params: DataLoaderParam<number>[], requestedFields: RequestedFields): Promise<UserInstance[]> {\n\n\t\tlet ids: number[] = params.map(param => param.key);\n\n\t\treturn Promise.resolve(\n\t\t\tUser\n\t\t\t\t.findAll({\n\t\t\t\t\twhere: { id: { $in: ids } },\n\t\t\t\t\tattributes: requestedFields.getFields(params[0].info, {keep: ['id'], exclude: ['posts']})\n\t\t\t\t})\n\t\t);\n\t}\n}"]}