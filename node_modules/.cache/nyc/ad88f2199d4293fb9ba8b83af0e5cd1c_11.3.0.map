{"version":3,"file":"/home/msvalandro/Documents/repo/graphql-node-api/src/graphql/resources/user/user.resolvers.ts","sources":["/home/msvalandro/Documents/repo/graphql-node-api/src/graphql/resources/user/user.resolvers.ts"],"names":[],"mappings":"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","sourcesContent":["import { GraphQLResolveInfo } from 'graphql';\nimport { Transaction } from 'sequelize';\n\nimport { DbConnection } from '../../../interfaces/DbConnectionInterface';\nimport { UserInstance } from '../../../models/UserModel';\nimport { handleError, throwError } from '../../../utils/utils';\nimport { compose } from '../../composable/composable.resolver';\nimport { AuthUser } from '../../../interfaces/AuthUserInterface';\nimport { authResolvers } from '../../composable/auth.resolver';\nimport { RequestedFields } from '../../ast/RequestedFields';\n\nexport const userResolvers = {\n\tUser: {\n\t\tposts: (user, {first = 10, offset = 0}, {db, requestedFields}: {db: DbConnection, requestedFields: RequestedFields}, info: GraphQLResolveInfo) => {\n\t\t\treturn db.Post\n\t\t\t\t.findAll({\n\t\t\t\t\twhere: {author: user.get('id')},\n\t\t\t\t\tlimit: first,\n\t\t\t\t\toffset: offset,\n\t\t\t\t\tattributes: requestedFields.getFields(info, {keep: ['id'], exclude: ['comments']})\n\t\t\t\t})\n\t\t\t\t.catch(handleError);\n\t\t}\n\t},\n\tQuery: {\n\t\tusers: (parent, {first = 10, offset = 0}, {db, requestedFields}: {db: DbConnection, requestedFields: RequestedFields}, info: GraphQLResolveInfo) => {\n\t\t\treturn db.User\n\t\t\t\t.findAll({\n\t\t\t\t\tlimit: first,\n\t\t\t\t\toffset: offset,\n\t\t\t\t\tattributes: requestedFields.getFields(info, {keep: ['id'], exclude: ['posts']})\n\t\t\t\t})\n\t\t\t\t.catch(handleError);\n\t\t},\n\t\tuser: (parent, {id}, {db, requestedFields}: {db: DbConnection, requestedFields: RequestedFields}, info: GraphQLResolveInfo) => {\n\t\t\tid = parseInt(id);\t\t\t\n\t\t\treturn db.User\n\t\t\t\t.findById(id, {\n\t\t\t\t\tattributes: requestedFields.getFields(info, {keep: ['id'], exclude: ['posts']})\n\t\t\t\t})\n\t\t\t\t.then((user: UserInstance) => {\n\t\t\t\t\tthrowError(!user, `User with id ${id} not found.`);\n\t\t\t\t\treturn user;\n\t\t\t\t})\n\t\t\t\t.catch(handleError);\n\t\t},\n\t\tcurrentUser: compose(...authResolvers)((parent, args, {db, authUser, requestedFields}: {db: DbConnection, authUser: AuthUser, requestedFields: RequestedFields}, info: GraphQLResolveInfo) => {\n\t\t\treturn db.User\n\t\t\t\t.findById(authUser.id, {\n\t\t\t\t\tattributes: requestedFields.getFields(info, {keep: ['id'], exclude: ['posts']})\n\t\t\t\t})\n\t\t\t\t.then((user: UserInstance) => {\n\t\t\t\t\tthrowError(!user, `User with id ${authUser.id} not found.`);\n\t\t\t\t\treturn user;\n\t\t\t\t}).catch(handleError);\n\t\t})\n\t},\n\tMutation: {\n\t\tcreateUser: (parent, {input}, {db}: {db: DbConnection}, info: GraphQLResolveInfo) => {\n\t\t\treturn db.sequelize.transaction((t: Transaction) => {\n\t\t\t\treturn db.User\n\t\t\t\t\t.create(input, {transaction: t});\n\t\t\t})\n\t\t\t.catch(handleError);\n\t\t},\n\t\tupdateUser: compose(...authResolvers)((parent, {input}, {db, authUser}: {db: DbConnection, authUser: AuthUser}, info: GraphQLResolveInfo) => {\n\t\t\treturn db.sequelize.transaction((t: Transaction) => {\n\t\t\t\treturn db.User\n\t\t\t\t\t.findById(authUser.id)\n\t\t\t\t\t.then((user: UserInstance) => {\n\t\t\t\t\t\tthrowError(!user, `User with id ${authUser.id} not found.`);\n\t\t\t\t\t\treturn user.update(input, {transaction: t});\n\t\t\t\t\t})\n\t\t\t})\n\t\t\t.catch(handleError);\n\t\t}),\n\t\tupdateUserPassword: compose(...authResolvers)((parent, {input}, {db, authUser}: {db: DbConnection, authUser: AuthUser}, info: GraphQLResolveInfo) => {\n\t\t\treturn db.sequelize.transaction((t: Transaction) => {\n\t\t\t\treturn db.User\n\t\t\t\t\t.findById(authUser.id)\n\t\t\t\t\t.then((user: UserInstance) => {\n\t\t\t\t\t\tthrowError(!user, `User with id ${authUser.id} not found.`);\t\t\t\t\t\t\n\t\t\t\t\t\treturn user.update(input, {transaction: t})\n\t\t\t\t\t\t\t.then((user: UserInstance) => !!user);\n\t\t\t\t\t})\n\t\t\t})\n\t\t\t.catch(handleError);\n\t\t}),\n\t\tdeleteUser: compose(...authResolvers)((parent, args, {db, authUser}: {db: DbConnection, authUser: AuthUser}, info: GraphQLResolveInfo) => {\n\t\t\treturn db.sequelize.transaction((t: Transaction) => {\n\t\t\t\treturn db.User\n\t\t\t\t\t.findById(authUser.id)\n\t\t\t\t\t.then((user: UserInstance) => {\n\t\t\t\t\t\tthrowError(!user, `User with id ${authUser.id} not found.`);\n\t\t\t\t\t\treturn user.destroy({transaction: t})\n\t\t\t\t\t\t\t.then((user) => !!user);\n\t\t\t\t\t});\n\t\t\t})\n\t\t\t.catch(handleError);\n\t\t})\n\t}\n};"]}