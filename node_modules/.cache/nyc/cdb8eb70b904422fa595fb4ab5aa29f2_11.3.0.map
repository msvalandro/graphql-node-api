{"version":3,"file":"/home/msvalandro/Documents/repo/graphql-node-api/src/graphql/resources/comment/comment.resolvers.ts","sources":["/home/msvalandro/Documents/repo/graphql-node-api/src/graphql/resources/comment/comment.resolvers.ts"],"names":[],"mappings":"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","sourcesContent":["import { GraphQLResolveInfo } from 'graphql';\nimport { Transaction } from 'sequelize';\n\nimport { DbConnection } from '../../../interfaces/DbConnectionInterface';\nimport { CommentInstance } from '../../../models/CommentModel';\nimport { handleError, throwError } from '../../../utils/utils';\nimport { compose } from '../../composable/composable.resolver';\nimport { authResolvers } from '../../composable/auth.resolver';\nimport { AuthUser } from '../../../interfaces/AuthUserInterface';\nimport { DataLoaders } from '../../../interfaces/DataLoadersInterface';\nimport { RequestedFields } from '../../ast/RequestedFields';\n\nexport const commentResolvers = {\n\tComment: {\n\t\tuser:  (comment, args, {db, dataloaders: {userLoader}}: {db: DbConnection, dataloaders: DataLoaders}, info: GraphQLResolveInfo) => {\n\t\t\treturn userLoader\n\t\t\t\t.load({key: comment.get('user'), info})\n\t\t\t\t.catch(handleError);\n\t\t},\n\t\tpost:  (comment, args, {db, dataloaders: {postLoader}}: {db: DbConnection, dataloaders: DataLoaders}, info: GraphQLResolveInfo) => {\n\t\t\treturn postLoader\n\t\t\t\t.load({key: comment.get('post'), info})\n\t\t\t\t.catch(handleError);\t\t\t\t\n\t\t}\n\t},\n\tQuery: {\n\t\tcommentsByPost: (parent, {postId, first = 10, offset = 0}, {db, requestedFields}: {db: DbConnection, requestedFields: RequestedFields}, info: GraphQLResolveInfo) => {\n\t\t\tpostId = parseInt(postId);\t\t\t\n\t\t\treturn db.Comment\n\t\t\t\t.findAll({\n\t\t\t\t\twhere: {post: postId},\n\t\t\t\t\tlimit: first,\n\t\t\t\t\toffset: offset,\n\t\t\t\t\tattributes: requestedFields.getFields(info)\n\t\t\t\t})\n\t\t\t\t.catch(handleError);\t\t\t\t\n\t\t}\n\t},\n\tMutation: {\n\t\tcreateComment: compose(...authResolvers)((parent, {input}, {db, authUser}: {db: DbConnection, authUser: AuthUser}, info: GraphQLResolveInfo) => {\n\t\t\tinput.user = authUser.id;\n\t\t\treturn db.sequelize.transaction((t: Transaction) => {\n\t\t\t\treturn db.Comment\n\t\t\t\t\t.create(input, {transaction: t});\n\t\t\t})\n\t\t\t.catch(handleError);\t\t\t\n\t\t}),\n\t\tupdateComment: compose(...authResolvers)((parent, {id, input}, {db, authUser}: {db: DbConnection, authUser: AuthUser}, info: GraphQLResolveInfo) => {\n\t\t\tid = parseInt(id);\n\t\t\treturn db.sequelize.transaction((t: Transaction) => {\n\t\t\t\treturn db.Comment\n\t\t\t\t\t.findById(id)\n\t\t\t\t\t.then((comment: CommentInstance) => {\n\t\t\t\t\t\tthrowError(!comment, `Comment with id ${id} not found.`);\n\t\t\t\t\t\tthrowError(comment.get('user') != authUser.id, `Unauthorized! You can only edit comments by yourself.`);\n\t\t\t\t\t\tinput.user = authUser.id;\t\t\t\t\t\t\n\t\t\t\t\t\treturn comment.update(input, {transaction: t});\n\t\t\t\t\t})\n\t\t\t})\n\t\t\t.catch(handleError);\t\t\t\n\t\t}),\n\t\tdeleteComment: compose(...authResolvers)((parent, {id}, {db, authUser}: {db: DbConnection, authUser: AuthUser}, info: GraphQLResolveInfo) => {\n\t\t\tid = parseInt(id);\n\t\t\treturn db.sequelize.transaction((t: Transaction) => {\n\t\t\t\treturn db.Comment\n\t\t\t\t\t.findById(id)\n\t\t\t\t\t.then((comment: CommentInstance) => {\n\t\t\t\t\t\tthrowError(!comment, `Comment with id ${id} not found.`);\n\t\t\t\t\t\tthrowError(comment.get('user') != authUser.id, `Unauthorized! You can only delete comments by yourself.`);\n\t\t\t\t\t\treturn comment.destroy({transaction: t})\n\t\t\t\t\t\t\t.then(comment => !!comment);\n\t\t\t\t\t})\n\t\t\t})\n\t\t\t.catch(handleError);\t\t\t\n\t\t})\n\t}\n};"]}