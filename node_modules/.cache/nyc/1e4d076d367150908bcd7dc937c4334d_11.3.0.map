{"version":3,"file":"/home/msvalandro/Documents/repo/graphql-node-api/src/graphql/resources/post/post.resolvers.ts","sources":["/home/msvalandro/Documents/repo/graphql-node-api/src/graphql/resources/post/post.resolvers.ts"],"names":[],"mappings":"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","sourcesContent":["import * as graphqlFields from 'graphql-fields';\nimport { GraphQLResolveInfo } from 'graphql';\nimport { Transaction } from 'sequelize';\n\nimport { DbConnection } from '../../../interfaces/DbConnectionInterface';\nimport { PostInstance } from '../../../models/PostModel';\nimport { handleError, throwError } from '../../../utils/utils';\nimport { compose } from '../../composable/composable.resolver';\nimport { authResolvers } from '../../composable/auth.resolver';\nimport { AuthUser } from '../../../interfaces/AuthUserInterface';\nimport { DataLoaders } from '../../../interfaces/DataLoadersInterface';\nimport { RequestedFields } from '../../ast/RequestedFields';\n\nexport const postResolvers = {\n\tPost: {\n\t\tauthor: (post, args, {db, dataloaders: {userLoader}}: {db: DbConnection, dataloaders: DataLoaders}, info: GraphQLResolveInfo) => {\n\t\t\treturn userLoader\n\t\t\t\t.load({key: post.get('author'), info})\n\t\t\t\t.catch(handleError);\t\t\n\t\t},\n\t\tcomments: (post, {first = 10, offset = 0}, {db, requestedFields}: {db: DbConnection, requestedFields: RequestedFields}, info: GraphQLResolveInfo) => {\n\t\t\treturn db.Comment\n\t\t\t\t.findAll({\n\t\t\t\t\twhere: {post: post.get('id')},\n\t\t\t\t\tlimit: first,\n\t\t\t\t\toffset: offset,\n\t\t\t\t\tattributes: requestedFields.getFields(info)\n\t\t\t\t})\n\t\t\t\t.catch(handleError);\t\t\t\t\n\t\t}\n\t},\n\tQuery: {\n\t\tposts: (parent, {first = 10, offset = 0}, {db, requestedFields}: {db: DbConnection, requestedFields: RequestedFields}, info: GraphQLResolveInfo) => {\n\t\t\treturn db.Post\n\t\t\t\t.findAll({\n\t\t\t\t\tlimit: first,\n\t\t\t\t\toffset: offset,\n\t\t\t\t\tattributes: requestedFields.getFields(info, {keep: ['id'], exclude: ['comments']})\n\t\t\t\t})\n\t\t\t\t.catch(handleError);\t\t\t\t\n\t\t},\n\t\tpost: (parent, {id}, {db, requestedFields}: {db: DbConnection, requestedFields: RequestedFields}, info: GraphQLResolveInfo) => {\n\t\t\tid = parseInt(id);\n\t\t\treturn db.Post\n\t\t\t\t.findById(id, {\n\t\t\t\t\tattributes: requestedFields.getFields(info, {keep: ['id'], exclude: ['comments']})\n\t\t\t\t})\n\t\t\t\t.then((post: PostInstance) => {\n\t\t\t\t\tthrowError(!post, `Post with id ${id} not found.`);\n\t\t\t\t\treturn post;\n\t\t\t\t})\n\t\t\t\t.catch(handleError);\t\t\t\t\n\t\t}\n\t},\n\tMutation: {\n\t\tcreatePost: compose(...authResolvers)((parent, {input}, {db, authUser}: {db: DbConnection, authUser: AuthUser}, info: GraphQLResolveInfo) => {\n\t\t\tinput.author = authUser.id;\n\t\t\treturn db.sequelize.transaction((t: Transaction) => {\n\t\t\t\treturn db.Post\n\t\t\t\t\t.create(input, {transaction: t});\n\t\t\t})\n\t\t\t.catch(handleError);\t\t\t\n\t\t}),\n\t\tupdatePost: compose(...authResolvers)((parent, {id, input}, {db, authUser}: {db: DbConnection, authUser: AuthUser}, info: GraphQLResolveInfo) => {\n\t\t\treturn db.sequelize.transaction((t: Transaction) => {\n\t\t\t\treturn db.Post\n\t\t\t\t\t.findById(id)\n\t\t\t\t\t.then((post: PostInstance) => {\n\t\t\t\t\t\tthrowError(!post, `Post with id ${id} not found.`);\n\t\t\t\t\t\tthrowError(post.get('author') != authUser.id, `Unauthorized! You can only edit posts by yourself.`);\t\t\t\t\t\t\n\t\t\t\t\t\tinput.author = authUser.id;\t\t\t\t\t\t\t\n\t\t\t\t\t\treturn post.update(input, {transaction: t});\n\t\t\t\t\t});\n\t\t\t})\n\t\t\t.catch(handleError);\t\t\t\n\t\t}),\n\t\tdeletePost: compose(...authResolvers)((parent, {id}, {db, authUser}: {db: DbConnection, authUser: AuthUser}, info: GraphQLResolveInfo) => {\n\t\t\tid = parseInt(id);\n\t\t\treturn db.sequelize.transaction((t: Transaction) => {\n\t\t\t\treturn db.Post\n\t\t\t\t\t.findById(id)\n\t\t\t\t\t.then((post: PostInstance) => {\n\t\t\t\t\t\tthrowError(!post, `Post with id ${id} not found.`);\n\t\t\t\t\t\tthrowError(post.get('author') != authUser.id, `Unauthorized! You can only delete posts by yourself.`);\n\t\t\t\t\t\treturn post.destroy({transaction: t})\n\t\t\t\t\t\t\t.then(post => !!post);\n\t\t\t\t\t});\n\t\t\t})\n\t\t\t.catch(handleError);\t\t\t\n\t\t})\n\t}\n};"]}